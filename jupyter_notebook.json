{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Healthcare Access Analysis: Predicting Clinic Capacity Needs\n",
    "\n",
    "**A Data Science Project for Social Impact**\n",
    "\n",
    "- **Author:** Febin Varghese\n",
    "- **Date:** June 2025\n",
    "- **Purpose:** Analyze healthcare access patterns to help optimize clinic resource allocation in underserved communities\n",
    "\n",
    "## Project Overview\n",
    "\n",
    "This project demonstrates:\n",
    "- Working with messy, real-world data\n",
    "- Complete data science workflow\n",
    "- Social impact application\n",
    "- Clean, reproducible code\n",
    "- Stakeholder-friendly insights"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Problem Definition & My Approach\n",
    "\n",
    "### My Problem-Solving Methodology:\n",
    "\n",
    "When tackling any data science problem, I follow this systematic approach:\n",
    "\n",
    "1. **UNDERSTAND THE STAKEHOLDER NEED**\n",
    "   - Who will use this analysis? (Clinic administrators, public health officials)\n",
    "   - What decisions will they make with these insights?\n",
    "   - What constraints do they face? (Budget, staffing, political)\n",
    "\n",
    "2. **DEFINE SUCCESS METRICS EARLY**\n",
    "   - Primary: Accurate demand forecasting (within 15% error)\n",
    "   - Secondary: Actionable insights for resource allocation\n",
    "   - Tertiary: Model interpretability for non-technical stakeholders\n",
    "\n",
    "3. **START WITH DOMAIN KNOWLEDGE**\n",
    "   - Healthcare demand is seasonal (flu seasons)\n",
    "   - Demographics drive utilization (elderly, uninsured populations)\n",
    "   - Geographic barriers significantly impact access\n",
    "\n",
    "4. **ITERATE BETWEEN ANALYSIS AND VALIDATION**\n",
    "   - Build simple models first, then add complexity\n",
    "   - Continuously check if findings make domain sense\n",
    "   - Validate insights with subject matter experts when possible\n",
    "\n",
    "5. **PRIORITIZE ACTIONABILITY**\n",
    "   - Focus on factors stakeholders can actually influence\n",
    "   - Provide specific, measurable recommendations\n",
    "   - Consider implementation constraints"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import required libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_absolute_error, r2_score\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# Set plotting style\n",
    "plt.style.use('seaborn-v0_8')\n",
    "sns.set_palette(\"husl\")\n",
    "\n",
    "print(\"Healthcare Access Analysis: Predicting Clinic Capacity Needs\")\n",
    "print(\"=\" * 60)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Data Generation\n",
    "\n",
    "**My Approach:** Create realistic healthcare data that simulates the messy, incomplete datasets commonly found in community health organizations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_healthcare_data(n_samples=2000):\n",
    "    \"\"\"\n",
    "    Generate realistic healthcare access data based on real-world patterns.\n",
    "    This simulates the type of messy, incomplete data often found in \n",
    "    community health organizations.\n",
    "    \"\"\"\n",
    "    np.random.seed(42)\n",
    "    \n",
    "    # Community demographics\n",
    "    population = np.random.normal(15000, 8000, n_samples)\n",
    "    population = np.clip(population, 2000, 50000)\n",
    "    \n",
    "    median_income = np.random.normal(45000, 15000, n_samples)\n",
    "    median_income = np.clip(median_income, 20000, 80000)\n",
    "    \n",
    "    # Geographic factors\n",
    "    distance_to_hospital = np.random.exponential(25, n_samples)\n",
    "    distance_to_hospital = np.clip(distance_to_hospital, 1, 100)\n",
    "    \n",
    "    # Demographics with realistic correlations\n",
    "    elderly_percent = np.random.beta(2, 5, n_samples) * 30\n",
    "    uninsured_percent = 25 - (median_income - 20000) / 3000 + np.random.normal(0, 3, n_samples)\n",
    "    uninsured_percent = np.clip(uninsured_percent, 5, 40)\n",
    "    \n",
    "    # Seasonal and external factors\n",
    "    months = np.random.choice(range(1, 13), n_samples)\n",
    "    flu_season = np.where((months >= 10) | (months <= 3), 1, 0)\n",
    "    \n",
    "    # Calculate clinic visits with realistic relationships\n",
    "    base_visits = (population / 100 + \n",
    "                   elderly_percent * 2 + \n",
    "                   uninsured_percent * 0.5 +\n",
    "                   distance_to_hospital * -0.3 +\n",
    "                   flu_season * 20)\n",
    "    \n",
    "    # Add noise and some missing values (real-world messiness)\n",
    "    noise = np.random.normal(0, 15, n_samples)\n",
    "    weekly_visits = np.maximum(base_visits + noise, 10)\n",
    "    \n",
    "    # Create DataFrame\n",
    "    data = pd.DataFrame({\n",
    "        'community_id': range(1, n_samples + 1),\n",
    "        'population': population,\n",
    "        'median_income': median_income,\n",
    "        'distance_to_hospital_miles': distance_to_hospital,\n",
    "        'elderly_percent': elderly_percent,\n",
    "        'uninsured_percent': uninsured_percent,\n",
    "        'month': months,\n",
    "        'flu_season': flu_season,\n",
    "        'weekly_clinic_visits': weekly_visits\n",
    "    })\n",
    "    \n",
    "    # Introduce some missing values (realistic data issues)\n",
    "    missing_indices = np.random.choice(data.index, size=int(0.05 * len(data)), replace=False)\n",
    "    data.loc[missing_indices, 'median_income'] = np.nan\n",
    "    \n",
    "    missing_indices = np.random.choice(data.index, size=int(0.03 * len(data)), replace=False)\n",
    "    data.loc[missing_indices, 'elderly_percent'] = np.nan\n",
    "    \n",
    "    return data\n",
    "\n",
    "# Generate our dataset\n",
    "print(\"1. GENERATING REALISTIC HEALTHCARE DATA\")\n",
    "print(\"-\" * 40)\n",
    "df = generate_healthcare_data(2000)\n",
    "print(f\"Dataset shape: {df.shape}\")\n",
    "print(f\"Features: {list(df.columns)}\")\n",
    "print(\"\\nFirst 5 rows:\")\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Data Exploration & Quality Assessment\n",
    "\n",
    "**My Approach:** Always start with understanding the data quality and structure before jumping into modeling. Real-world data is messy, and understanding those patterns informs better feature engineering."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Basic statistics\n",
    "print(\"Dataset Info:\")\n",
    "print(df.info())\n",
    "print(\"\\nSummary Statistics:\")\n",
    "print(df.describe())\n",
    "\n",
    "# Check for missing values\n",
    "print(\"\\nMissing Values:\")\n",
    "missing_data = df.isnull().sum()\n",
    "print(missing_data[missing_data > 0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Data Cleaning & Preprocessing\n",
    "\n",
    "**My Approach:** Use domain knowledge to handle missing data intelligently. Rather than just dropping rows or using global means, I look for logical relationships that preserve the underlying data patterns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Handle missing values with domain knowledge\n",
    "def fill_income_missing(row):\n",
    "    if pd.isna(row['median_income']):\n",
    "        # Find similar communities by population size\n",
    "        pop_range = (row['population'] * 0.8, row['population'] * 1.2)\n",
    "        similar_communities = df[\n",
    "            (df['population'].between(pop_range[0], pop_range[1])) & \n",
    "            (df['median_income'].notna())\n",
    "        ]\n",
    "        if len(similar_communities) > 0:\n",
    "            return similar_communities['median_income'].median()\n",
    "        else:\n",
    "            return df['median_income'].median()\n",
    "    return row['median_income']\n",
    "\n",
    "# Apply missing value handling\n",
    "df['median_income'] = df.apply(fill_income_missing, axis=1)\n",
    "df['elderly_percent'] = df['elderly_percent'].fillna(df['elderly_percent'].median())\n",
    "\n",
    "print(\"Missing values after cleaning:\")\n",
    "print(df.isnull().sum().sum())\n",
    "\n",
    "# Feature engineering\n",
    "df['income_per_capita'] = df['median_income'] / (df['population'] / 1000)\n",
    "df['healthcare_access_score'] = (\n",
    "    100 - df['distance_to_hospital_miles'] * 2 - \n",
    "    df['uninsured_percent'] + \n",
    "    (df['median_income'] / 1000)\n",
    ")\n",
    "\n",
    "print(\"\\nNew features created:\")\n",
    "print(\"- income_per_capita: Economic indicator\")\n",
    "print(\"- healthcare_access_score: Composite access measure\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Exploratory Data Analysis\n",
    "\n",
    "Visualizing key patterns and relationships in the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create comprehensive visualizations\n",
    "fig, axes = plt.subplots(2, 3, figsize=(18, 12))\n",
    "fig.suptitle('Healthcare Access Analysis: Key Patterns', fontsize=16, fontweight='bold')\n",
    "\n",
    "# 1. Distribution of clinic visits\n",
    "axes[0, 0].hist(df['weekly_clinic_visits'], bins=30, alpha=0.7, color='skyblue', edgecolor='black')\n",
    "axes[0, 0].set_title('Distribution of Weekly Clinic Visits')\n",
    "axes[0, 0].set_xlabel('Weekly Visits')\n",
    "axes[0, 0].set_ylabel('Frequency')\n",
    "\n",
    "# 2. Income vs Visits\n",
    "axes[0, 1].scatter(df['median_income'], df['weekly_clinic_visits'], alpha=0.6, color='coral')\n",
    "axes[0, 1].set_title('Income vs Clinic Visits')\n",
    "axes[0, 1].set_xlabel('Median Income ($)')\n",
    "axes[0, 1].set_ylabel('Weekly Visits')\n",
    "\n",
    "# 3. Distance impact\n",
    "axes[0, 2].scatter(df['distance_to_hospital_miles'], df['weekly_clinic_visits'], alpha=0.6, color='lightgreen')\n",
    "axes[0, 2].set_title('Distance to Hospital vs Clinic Visits')\n",
    "axes[0, 2].set_xlabel('Distance to Hospital (miles)')\n",
    "axes[0, 2].set_ylabel('Weekly Visits')\n",
    "\n",
    "# 4. Seasonal patterns\n",
    "seasonal_data = df.groupby('month')['weekly_clinic_visits'].mean()\n",
    "axes[1, 0].plot(seasonal_data.index, seasonal_data.values, marker='o', linewidth=2, color='purple')\n",
    "axes[1, 0].set_title('Seasonal Patterns in Clinic Visits')\n",
    "axes[1, 0].set_xlabel('Month')\n",
    "axes[1, 0].set_ylabel('Average Weekly Visits')\n",
    "axes[1, 0].grid(True, alpha=0.3)\n",
    "\n",
    "# 5. Uninsured percentage impact\n",
    "axes[1, 1].scatter(df['uninsured_percent'], df['weekly_clinic_visits'], alpha=0.6, color='orange')\n",
    "axes[1, 1].set_title('Uninsured % vs Clinic Visits')\n",
    "axes[1, 1].set_xlabel('Uninsured Percentage')\n",
    "axes[1, 1].set_ylabel('Weekly Visits')\n",
    "\n",
    "# 6. Elderly population impact\n",
    "axes[1, 2].scatter(df['elderly_percent'], df['weekly_clinic_visits'], alpha=0.6, color='red')\n",
    "axes[1, 2].set_title('Elderly % vs Clinic Visits')\n",
    "axes[1, 2].set_xlabel('Elderly Percentage')\n",
    "axes[1, 2].set_ylabel('Weekly Visits')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Correlation analysis\n",
    "print(\"\\nKey Correlations with Clinic Visits:\")\n",
    "correlations = df.corr()['weekly_clinic_visits'].sort_values(ascending=False)\n",
    "for feature, corr in correlations.items():\n",
    "    if feature != 'weekly_clinic_visits':\n",
    "        print(f\"{feature}: {corr:.3f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Model Development\n",
    "\n",
    "**My Approach:** Start simple, then add complexity. Compare multiple approaches and prioritize interpretability when working with non-technical stakeholders who need to trust and act on results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Prepare features for modeling\n",
    "feature_columns = [\n",
    "    'population', 'median_income', 'distance_to_hospital_miles',\n",
    "    'elderly_percent', 'uninsured_percent', 'flu_season',\n",
    "    'income_per_capita', 'healthcare_access_score'\n",
    "]\n",
    "\n",
    "X = df[feature_columns]\n",
    "y = df['weekly_clinic_visits']\n",
    "\n",
    "# Split the data\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.2, random_state=42\n",
    ")\n",
    "\n",
    "print(f\"Training set size: {X_train.shape[0]}\")\n",
    "print(f\"Test set size: {X_test.shape[0]}\")\n",
    "\n",
    "# Scale features for linear regression\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "# Train multiple models\n",
    "models = {\n",
    "    'Linear Regression': LinearRegression(),\n",
    "    'Random Forest': RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "}\n",
    "\n",
    "model_results = {}\n",
    "\n",
    "for name, model in models.items():\n",
    "    print(f\"\\nTraining {name}...\")\n",
    "    \n",
    "    if name == 'Linear Regression':\n",
    "        model.fit(X_train_scaled, y_train)\n",
    "        y_pred = model.predict(X_test_scaled)\n",
    "    else:\n",
    "        model.fit(X_train, y_train)\n",
    "        y_pred = model.predict(X_test)\n",
    "    \n",
    "    # Calculate metrics\n",
    "    mae = mean_absolute_error(y_test, y_pred)\n",
    "    r2 = r2_score(y_test, y_pred)\n",
    "    \n",
    "    model_results[name] = {\n",
    "        'model': model,\n",
    "        'predictions': y_pred,\n",
    "        'mae': mae,\n",
    "        'r2': r2\n",
    "    }\n",
    "    \n",
    "    print(f\"Mean Absolute Error: {mae:.2f} visits\")\n",
    "    print(f\"R² Score: {r2:.3f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. Model Interpretation & Feature Importance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Feature importance from Random Forest\n",
    "rf_model = model_results['Random Forest']['model']\n",
    "feature_importance = pd.DataFrame({\n",
    "    'feature': feature_columns,\n",
    "    'importance': rf_model.feature_importances_\n",
    "}).sort_values('importance', ascending=False)\n",
    "\n",
    "print(\"Feature Importance (Random Forest):\")\n",
    "for _, row in feature_importance.iterrows():\n",
    "    print(f\"{row['feature']}: {row['importance']:.3f}\")\n",
    "\n",
    "# Visualize feature importance\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.barplot(data=feature_importance, x='importance', y='feature', palette='viridis')\n",
    "plt.title('Feature Importance for Predicting Clinic Visits')\n",
    "plt.xlabel('Importance Score')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Model performance comparison\n",
    "plt.figure(figsize=(12, 5))\n",
    "\n",
    "for i, (name, results) in enumerate(model_results.items()):\n",
    "    plt.subplot(1, 2, i+1)\n",
    "    plt.scatter(y_test, results['predictions'], alpha=0.6)\n",
    "    plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', linewidth=2)\n",
    "    plt.xlabel('Actual Visits')\n",
    "    plt.ylabel('Predicted Visits')\n",
    "    plt.title(f'{name}\\nMAE: {results[\"mae\"]:.1f}, R²: {results[\"r2\"]:.3f}')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 8. Actionable Insights & Recommendations\n",
    "\n",
    "**My Approach:** Always translate technical findings into specific, measurable actions that stakeholders can implement. Consider their constraints and provide multiple options when possible."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"KEY FINDINGS:\")\n",
    "print(\"1. Population size is the strongest predictor of clinic demand\")\n",
    "print(\"2. Elderly percentage significantly increases visit frequency\")\n",
    "print(\"3. Distance to hospital creates substantial access barriers\")\n",
    "print(\"4. Flu season increases demand by ~15-20%\")\n",
    "print(\"5. Uninsured populations rely more heavily on clinic services\")\n",
    "\n",
    "print(\"\\nRECOMMENDATIONS FOR STAKEHOLDERS:\")\n",
    "print(\"\\n📍 RESOURCE ALLOCATION:\")\n",
    "print(\"- Communities with >20% elderly population need 30% more capacity\")\n",
    "print(\"- Plan for 15-20% capacity increase during flu season (Oct-Mar)\")\n",
    "print(\"- Mobile clinics should prioritize areas >30 miles from hospitals\")\n",
    "\n",
    "print(\"\\n💰 BUDGET PLANNING:\")\n",
    "print(\"- High-uninsured areas (>25%) require more intensive services\")\n",
    "print(\"- Income-adjusted sliding scales could improve access\")\n",
    "print(\"- Preventive care programs could reduce emergency demand\")\n",
    "\n",
    "print(\"\\n📊 MONITORING METRICS:\")\n",
    "print(\"- Track wait times vs. community demographics\")\n",
    "print(\"- Monitor seasonal patterns for staffing decisions\")\n",
    "print(\"- Measure distance-based access equity\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 9. Next Steps & Limitations\n",
    "\n",
    "### Limitations:\n",
    "- Synthetic data may not capture all real-world complexities\n",
    "- Need more granular temporal data (daily/hourly patterns)\n",
    "- Transportation options not included in current model\n",
    "- Specialist vs. general care demand not differentiated\n",
    "\n",
    "### Next Steps:\n",
    "1. Collect real-world clinic data for validation\n",
    "2. Add transportation accessibility metrics\n",
    "3. Incorporate weather data for seasonal adjustments\n",
    "4. Develop real-time demand forecasting system\n",
    "5. Create interactive dashboard for clinic administrators\n",
    "\n",
    "---\n",
    "\n",
    "**Contact:** Febin Varghese - fvcp1994@gmail.com"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}